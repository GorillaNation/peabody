#!/usr/bin/env python

from argparse import ArgumentParser
import sys
import signal
import subprocess
import time
import random
import lockfile
import select
import StringIO
import fcntl
import os

def main():
    global options, cmd

    lock = None
    if options.lockfile:
        lock = lockfile.FileLock(options.lockfile)
        try:
            lock.acquire(0)
        except lockfile.AlreadyLocked:
            # file is locked
            sys.exit(1)
        except lockfile.LockFailed:
            # file couldn't be locked for some reason
            sys.exit(2)

    if options.splay:
        time.sleep(random.randint(0,options.splay))

    try:
        child = subprocess.Popen(cmd,stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        fl = fcntl.fcntl(child.stdout, fcntl.F_GETFL)
        fcntl.fcntl(child.stdout, fcntl.F_SETFL, fl | os.O_NONBLOCK)
        fl = fcntl.fcntl(child.stderr, fcntl.F_GETFL)
        fcntl.fcntl(child.stderr, fcntl.F_SETFL, fl | os.O_NONBLOCK)
    except OSError as e:
        sys.exit("Unable to launch child process: %s (Errno: %i)" % (e.strerror, e.errno))

    if options.timeout:
        def soft_timeout(signum, frame):
            child.terminate()

            if options.hardtimeout:
                def hard_timeout(signum, frame):
                    child.kill()

                signal.signal(signal.SIGALRM, hard_timeout)
                # we've already been waiting softtimeout seconds
                signal.alarm(options.hardtimeout - options.timeout)

        signal.signal(signal.SIGALRM, soft_timeout)
        signal.alarm(options.timeout)

    fds = {
        child.stderr.fileno(): {
            "label": "STDERR",
            "buf": "",
            "fd": child.stderr,
        },
        child.stdout.fileno(): {
            "label": "STDOUT",
            "buf": "",
            "fd": child.stdout
        }
    }
    while fds:
        (reads, writes, rithmatics) = select.select(fds.keys(), [], [])
        for readfd in reads:
            buf = fds[readfd]["fd"].read(8192)
            fds[readfd]["buf"] += buf
            while True:
                (line, partition, leftover) = fds[readfd]["buf"].partition("\n")
                if partition:
                    print "{0}: {1}".format(fds[readfd]["label"], line)
                    fds[readfd]["buf"] = leftover
                else:
                    break
            if not buf:
                print "fd closed, baleeeeted"
                del fds[readfd]

    child.wait()

    # shouldn't need to, but for good measure
    if lock:
        lock.release()

    sys.exit(child.returncode)


if __name__ == "__main__":
    # parse command line arguments ... I'd like to figure out how to get it so this does *all* of my arg parsing
    parser = ArgumentParser()
    parser.add_argument("-v", "--verbose", help="set verbose mode", action="store_true")
    parser.add_argument("-t", "--timeout", help="timeout for child process (SIGTERM)", type=int, dest="timeout")
    parser.add_argument("-T", "--hard-timeout", help="hard timeout for child process (SIGKILL)", type=int, dest="hardtimeout")
    parser.add_argument("-s", "--splay", help="sleep randomly for up to SPLAY seconds before running job", type=int, dest="splay")
    parser.add_argument("-l", "--lock-file", help="path to file to lock for concurrency protection", dest="lockfile")
    (options, cmd) = parser.parse_known_args()

    if not cmd:
        print "usage should go here"
        sys.exit(1)

    if (cmd[0] == '--'):
        cmd = cmd[1:]

    main()

